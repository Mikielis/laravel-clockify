<?php

namespace Tests\Feature;

use App\Models\User;
use App\Repositories\UserActivityRepositoryInterface;
use App\Repositories\UserActivityRepository;
use App\Repositories\UserRepositoryInterface;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use Tests\TestCase;
use Illuminate\Support\Facades\Auth;
use Illuminate\Auth\Events\Login;

class UserActivityTest extends TestCase
{
    use DatabaseMigrations;

    protected static array $activityTypes;

    protected static $setUpHasRunOnce = false;

    protected UserRepositoryInterface $userRepository;

    protected UserActivityRepositoryInterface $userActivityRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // Migrate DB only once - prevent doing this before each test
        if (!static::$setUpHasRunOnce) {
            $this->runDatabaseMigrations();
            static::$setUpHasRunOnce = true;
            static::$activityTypes = UserActivityRepository::$types;
        }

        // Get user repository
        $this->userRepository = $this->app->make(UserRepositoryInterface::class);

        // Get UserActivityRepositoryInterface
        $this->userActivityRepository = $this->app->make(UserActivityRepositoryInterface::class);
    }

    /**
     * The application does not log seen pages by unauthenticated user
     * @return void
     */
    public function test_unknown_user_cannot_log_seen_page(): void
    {
        // Trigger page open
        $this->get(route('home'))->assertStatus(302);
        $lastActivity = $this->userActivityRepository->getLast();

        $this->assertNull($lastActivity);
    }

    /**
     * The application does log seen pages by authenticated user
     * @return void
     * @throws \Exception
     */
//    public function test_authenticated_user_can_log_seen_page(): void
//    {
//        // Create first account
//        $email = str::random(5) . '@gmail.com';
//        $this->createUser('name', $email, 'somepassword');
//        $user = $this->getUser($email);
//        Auth::login($user);
//        Event::dispatch(Login::class);
//
//        // Trigger page open
//
//        $this->get(route('home'));
//        $lastActivity = $this->userActivityRepository->getLast();
//        dd($lastActivity);
//
//        // Is returned object
//        $this->assertIsObject($lastActivity);
//
//        // Is '/' latest seen page (dashboard path)
//        $this->assertEquals('/', $lastActivity->page);
//
//        // Is 'seen' type
//        $this->assertEquals(self::$activityTypes['seen'], $lastActivity->type);
//    }

    /**
     * The application does log seen pages by authenticated user
     * @return void
     */
    public function test_authentication_and_logout_logs(): void
    {
        // Get UserRepositoryInterface
        $userRepository = $this->app->make(UserRepositoryInterface::class);

        // Create first account
        $email = str::random(5) . '@gmail.com';
        $this->createUser('name', $email, 'somepassword');
        $user = $this->getUser($email);

        // Authenticate user
        Auth::login($user);
        $userId = Auth::id();

        // Check latest log
        $lastActivity = $this->userActivityRepository->getLast();

        // It must be current user ID and "Authenticated" log type
        $this->assertEquals($lastActivity->user_id, $userId);
        $this->assertEquals(self::$activityTypes['authenticated'], $lastActivity->type);

        Auth::logout();

        // Check latest log
        $lastActivity = $this->userActivityRepository->getLast();

        $this->assertEquals(self::$activityTypes['logged out'], $lastActivity->type);
        $this->assertEquals($userId, $lastActivity->user_id);
    }

    /**
     * @param string $name
     * @param string $email
     * @param string $password
     * @return void
     */
    private function createUser(string $name, string $email, string $password): void
    {
        // Create a new account
        $this->userRepository->addGoogleUser($name, $email, Hash::make($password));
    }

    /**
     * @param $email
     * @return mixed
     */
    private function getUser($email): User|null
    {
        Event::fake(Login::class);
        return $this->userRepository->getGoogleUser($email);
    }
}
