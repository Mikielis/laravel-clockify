<?php

declare(strict_types=1);

namespace Tests\Feature;

use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Database\Eloquent\Model;
use Tests\TestCase;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Exceptions\RoleAlreadyExists;
use Spatie\Permission\Exceptions\PermissionAlreadyExists;


class UserPermissionTest extends TestCase
{
    use DatabaseMigrations;

    protected static $setUpHasRunOnce = false;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // Migrate DB only once - prevent doing this before each test
        if (!static::$setUpHasRunOnce) {
            $this->runDatabaseMigrations();
            static::$setUpHasRunOnce = true;
        }
    }

    /**
     * Can add user role
     * @return void
     */
    public function test_can_add_user_role()
    {
        // Role can be added
        $role = Role::create(['name' => 'writer']);
        $this->assertInstanceOf(Model::class, $role);

        // Role cannot be duplicated
        try {
            Role::create(['name' => 'writer']);
        } catch (RoleAlreadyExists $exception) {
            $this->assertEquals(0, $exception->getCode());
        }
    }

    /**
     * Can add permission
     * @return void
     */
    public function test_can_add_permission()
    {
        // Permission can be added
        $permission = Permission::create(['name' => 'can do sth']);
        $this->assertInstanceOf(Model::class, $permission);

        // Permission cannot be duplicated
        try {
            Permission::create(['name' => 'can do sth']);
        } catch (PermissionAlreadyExists $exception) {
            $this->assertEquals(0, $exception->getCode());
        }
    }
}
