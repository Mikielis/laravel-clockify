<?php

declare(strict_types=1);

namespace Tests\Feature;

use Illuminate\Database\QueryException;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use Tests\TestCase;
use App\Models\User;
use Illuminate\Support\Facades\DB;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class UserTest extends TestCase
{
    use DatabaseMigrations;

    protected static $setUpHasRunOnce = false;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // Migrate DB only once - prevent doing this before each test
        if (!static::$setUpHasRunOnce) {
            $this->runDatabaseMigrations();
            static::$setUpHasRunOnce = true;
        }
    }

    /**
     * User can be created
     */
    public function test_can_create_user_account()
    {
        $number = User::factory()->count(1)->make()->count();
        $this->assertEquals(1, $number);
    }

    /**
     * Cannot duplicate user's email
     */
    public function test_cannot_duplicate_email()
    {
        $response = DB::table('users')->insert([
            'name' => Str::random(10),
            'email' => 'test@gmail.com',
            'password' => Hash::make('password'),
        ]);

        // First user successfully created
        $this->assertTrue($response);

        try {
            DB::table('users')->insert(
                [
                    'name' => Str::random(10),
                    'email' => 'test@gmail.com',
                    'password' => Hash::make('password'),
                ]
            );
        } catch (QueryException $e) {
            // Second user could not be created because of duplicated email address - expected SQL error 23000
            $this->assertEquals(23000, $e->getCode());
        }
    }

    /**
     * Can create socialite account
     */
    public function test_can_create_socialite_account_with_google()
    {
        $columns = DB::getSchemaBuilder()->getColumnListing('users');

        // Check required columns in DB table
        $this->assertContains('social_id', $columns);
        $this->assertContains('social_type', $columns);

        $response = DB::table('users')->insert([
            'name' => Str::random(10),
            'email' => 'test@gmail.com',
            'password' => Hash::make('password'),
            'social_id' => 999999999999999999999,
            'social_type' => 'google',
        ]);

        // User account successfully created
        $this->assertTrue($response);
    }
}
